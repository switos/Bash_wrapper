#!/usr/bin/env bash
POSIXLY_CORRECT=yes
set -e
helpme() { 
echo "mole -h
mole [-g GROUP] FILE
mole [-m] [FILTERS] [DIRECTORY]
mole list [FILTERS] [DIRECTORY]" ; exit 0; 
}

check_f () { # check if filtr is set up
    if [ "$1" -ne 0 ]
    then
    echo "chybne zadane parametry"
    exit 1;
    fi
}

make_dir_and_file() { # 
	if [ ! -d $(dirname $(realpath -m "$1")) ]
	then
	mkdir $(dirname $(realpath -m "$1"))
	fi
	touch $(realpath "$1")
}

check_mole() {
	if [ -z ${MOLE_RC+x} ]
	then 
	echo "MOLE_RC neni nastavena"
	exit 1
	fi
	if [ ! -f $(realpath -m "$MOLE_RC") ]
	then 
	make_dir_and_file "$MOLE_RC" 
	fi
}

check_editor () {
	if [ -z ${EDITOR+x} ]
		then
		if [ -z ${VISUAL+x} ]
			then
			vi "$1"
			if [ "$?" -ne "0" ] 
				then
					echo Editor vratil chybu 
					exit $?
			fi
		else
			"$VISUAL" "$1"
			if [ "$?" -ne "0" ]
				then
					echo Editor vratil chybu 
					exit $?
			fi
		fi
	else
		"$EDITOR" "$1"
		if [ "$?" -ne "0" ] 
			then
				echo Editor vratil chybu 
				exit $?
		fi
	fi
}



save_usage() {
	if [ "$g_flag" -ne "0" ]  # if we dont have -g oprion saves without a gruop, - symbol
	then 
		echo "$(dirname $file_path) $(basename $file_path) $date $USER $g_arg" | awk -F'[ ]' '{print $1, $2, $3, $4, $5, $6}' >> $MOLE_RC
	else 
		echo "$(dirname $file_path) $(basename $file_path) $date $USER "-"" | awk -F'[ ]' '{print $1, $2, $3, $4, $5, $6}' >> $MOLE_RC	
	fi
}

g_filter() {  # we create a awk variable groups then split it by , symbol to variable a and then 
			  # if group name in a match group name that is stored in MOLE_RC we print this usage
			  # if we g option is not seted, we just print
	if [ "$g_flag" -ne 0 ]
	then
		awk -v groups="$g_arg" 'BEGIN { split(groups, a, ",") } { for (i in a) if (match($6, a[i])) print }'
	else 
		awk -F'[ ]' '{print}'
	fi
}

m_filter() {
	# fnamecnt is filenames counter that is an associated array, that have counts of name as value 
	# after we count how many time name appears, we set up max and name that have appeard more, i love awk
	if [ "$m_flag" -ne 0 ]
	then
		awk '{fnamescnt[$2]++} END {for (name in fnamescnt) if (fnamescnt[name] > max) {max=fnamescnt[name]; f_m=name} print f_m}'
	else 
		awk -F'[ ]' '{print $3, $4, $0}' | sort -k1 -k2 -r | cut -d' ' -f3- | head -1 | awk -F'[ ]' '{print $2}'
	fi
}

match_with_file_path(){
	awk -v var="$file_path" '$1 == var'
}
print_awk() {
	# just printing
	awk -F'[ ]' '{print $1, $2, $3, $4, $5, $6}' $MOLE_RC
}

b_filter() {
	awk -v var="$b_arg" '$3 <= var'
}
a_filter() {
	awk -v var="$a_arg" '$3 >= var'
}

group_list () {
	## seen and files are asociative arrays 
	## we chek if filename is in files, if not we add it with a value of $0, that means all field
	## if filename is in, we check if groupname is in seen array, and it is not -
	## if true we add a value in seen associated with groupname and add groupname to list of groupnames 
	awk -F' ' '{
  			if ($2 in files) { 
   				if (!seen[$6] && $6!="-") {
    	  			files[$2] = files[$2] "," $6;
    	 			seen[$6] = 1;
    			}
  			} else {
    			files[$2] = $0;
    			seen[$6] = 1;
  			}
	}
	END {
  		for (f in files) {
    		print files[f];
  		}
	}' 
}

alf_num() {
	## groups are in $2, we split it to array fields, and than use asort, that sorts it
	## then we concatenate values of fields in one string tmp, and assign tmp value to $2
	awk -F' ' '{
	n = split($2, fields, ",");
	asort(fields);
	tmp = fields[1]
	if (length(fields) > 1){
		for (i=2; i<=n; i++) {
			tmp = tmp "," fields[i]
		}
	}
	$2 = tmp
	print $1, $2
	}'
}

concatenate () {
	## it is similar to group_list
	## first we join $1 directory and $2 filename
	## than $3 YY-MM-DD and $4 time part
	## we check if $1 is in path, if not add to it
	## if true add an additional date of usage
	## i love awk again
	awk -F' ' '{
	  			$1 =  $1 "/" $2
				$3 = $3 "_" $4
  				if ($1 in paths) {
    	  				paths[$1] = paths[$1] ";" $3;
  				} else {
    				paths[$1] = $1 ";" $3
  				}
				}
				END {
					for (p in paths) {
						print paths[p];
					}
				}'
}

dir_parse () {
	dir="$@"
	for path in $dir; do
		if [ -d  $(realpath $path) ]
		then
			file_path=$path
			file_path=$(realpath $path)
			print_awk | match_with_file_path
		fi
	done
}

secret_function() {
	save_to=$(realpath -m /home/$USER/.mole)
	fname=$(echo "log_"$USER"_$date" | tr ' :' '_-')
	if [ ! -d $save_to ]
		then
			mkdir $save_to
	fi
	if [ -z "$1" ]
		then			
			tmp="$a_flag$b_flag"
			case $tmp in 
				00) print_awk | concatenate | sort -t";" -k1 | tr ':' '-' | bzip2 > $save_to"/"$fname".bz2";; 
				01) print_awk | b_filter | concatenate | sort -t";" -k1 | tr ':' '-' | bzip2 > $save_to"/"$fname".bz2";;
				10) print_awk | a_filter | concatenate | sort -t";" -k1 |  tr ':' '-' | bzip2 > $save_to"/"$fname".bz2";;
				11) print_awk | a_filter | b_filter | concatenate | sort -t";" -k1 | tr ':' '-' | bzip2 > $save_to"/"$fname".bz2";;
			esac
		else
			tmp="$a_flag$b_flag"
			case $tmp in 
				00) dir_parse "$@" | concatenate | sort -t";" -k1 | tr ':' '-'| bzip2 > $save_to"/"$fname".bz2" ;; 
				01) dir_parse "$@" | b_filter | concatenate | sort -t";" -k1 | tr ':' '-'| bzip2 > $save_to"/"$fname".bz2";;
				10) dir_parse "$@" | a_filter | concatenate | sort -t";" -k1 | tr ':' '-'| bzip2 > $save_to"/"$fname".bz2";;
				11) dir_parse "$@" | a_filter | b_filter |  concatenate | sort -t";" -k1 | tr ':' '-' |bzip2 > $save_to"/"$fname".bz2";;
			esac
	fi
}

indent () {
	# Counting max lenght of filename, to set up same indent
	awk -F ' ' -v max_length="0" '{
    if (length($1) > max_length) {
        max_length = length($1)
    }
    	records[NR] = $0
	}
	END {
		max_length = max_length + 1
    	for (i=1; i<=NR; i++) {
    	    split(records[i], fields, " ")
    	    printf "%-*s %s\n", max_length, fields[1] ":", fields[2]
    	}
	}'
}

alf_num_sort() {
	awk -F'[ ]' '{print  $2, $6}'| alf_num | sort -k1| indent 
}

cut_deleted() {
	## cheking if file exist
	awk -F ' ' '{ 
		if (system("[ -e " $1"/"$2 " ]") == 0) {
			print $0
		}
	}'
}

list() {
	if [ -z "$file_path" ]
		then 
		file_path=$(realpath $(pwd))
		else 
		file_path=$(realpath $file_path)
	fi
	if [ -d "$file_path" ]
		then
		tmp="$a_flag$b_flag"
		case $tmp in 
			00) print_awk | match_with_file_path | g_filter | cut_deleted | group_list | alf_num_sort;; 
			01) print_awk | match_with_file_path | b_filter | g_filter | cut_deleted | group_list | alf_num_sort ;;
			10) print_awk | match_with_file_path | a_filter | g_filter | cut_deleted | group_list | alf_num_sort ;;
			11) print_awk | match_with_file_path | a_filter | b_filter | g_filter| cut_deleted | group_list | alf_num_sort ;;
		esac
		else
			echo "Chyba, neexistujici adresar"
			exit 1
	fi
}

f_or_dir() {
    if [ -d $1 ]
		then ## if user want to use mole [-m] [FILTERS] [DIRECTORY] directry must exists, so if not, it would be file 
			#  above  below
		tmp="$a_flag$b_flag"
		case $tmp in 
			00) tmpvar=$(print_awk | match_with_file_path | g_filter | m_filter);; 
			01) tmpvar=$(print_awk | match_with_file_path | b_filter | g_filter | m_filter);;
			10) tmpvar=$(print_awk | match_with_file_path | a_filter | g_filter | m_filter);;
			11) tmpvar=$(print_awk | match_with_file_path | a_filter | b_filter | g_filter | m_filter);;
		esac
		if [ "$tmpvar" = "" ]
		then
		echo "Chyba, nebyl nalezen zadny soubor k otevreni"
		exit 1
		fi
		file_path="$file_path/$tmpvar" 
		g_flag=0;
		save_usage 
		check_editor $(realpath "$tmpvar")
    else 
		check_f "$a_flag"
		check_f "$b_flag"
		check_f "$m_flag"
		save_usage
        check_editor $(realpath -m "$1")
	fi
}


date=$(date '+%Y-%m-%d %H:%M:%S')
check_mole

a_flag=0;
b_flag=0;
g_flag=0;
m_flag=0;
g_arg=0;
a_arg=0;
b_arg=0;
m_arg=0;
TEMP=$( getopt  -s bash -o a:b:g:hm -- "$@" )
eval set -- "$TEMP"
while true ; do
	case "$1" in
        -m) shift; check_f "$m_flag"; m_flag="1";;
		-a) shift; check_f "$a_flag"; a_flag="1"; a_arg="$1"; shift;; 
		-b) shift; check_f "$b_flag"; b_flag="1"; b_arg="$1"; shift;;
		-g) shift; check_f "$g_flag"; g_flag="1"; g_arg="$1"; shift;;
		-h) helpme; exit 1 ;; 
		--) shift ; break;;
	esac
done

case "$1" in
        list) shift; check_f "$m_flag"; file_path=$1; list ;;
        secret-log) check_f "$m_flag";check_f "$g_flag"; shift; secret_function "$@" ;; 
        '')	file_path=$(realpath $(pwd)); f_or_dir "${file_path}" ;;
        *) file_path=$(realpath -m "$1"); f_or_dir "${file_path}" ;;
esac